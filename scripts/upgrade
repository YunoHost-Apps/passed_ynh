#!/bin/bash

#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source /usr/share/yunohost/helpers

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression "Stopping $app's systemd service..."

ynh_systemctl --service="$app" --action="stop"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression "Upgrading source files..."

ynh_safe_rm "$install_dir"
ynh_setup_source --dest_dir="$install_dir/build"

#=================================================
# BUILD APP
#=================================================
ynh_script_progression "Setting build environment..."
#REMOVEME? ynh_go_install 

ynh_script_progression "Building $app..."
pushd $install_dir/build/
    # Tweak upstream code to add support for subpath install via creation of PASSED_SUBPATH env variable (defaulting to "/")
    sed -i '/^\tvar address string/i \\tvar subpath string' main.go                                                     # declare subpath var
    sed -i '/^\tvar subpath string/i \\tvar trimmedSubpath string' main.go                                              # declare trimmedSubpath var (to handle both $path="/" or $path="/anything")
    sed -i '/env("PASSED_ADDRESS", &address, ":3000")/i \\tenv("PASSED_SUBPATH", &subpath, "/")' main.go                # get environment var PASSED_SUBPATH
    sed -i '/handler := http\.Handler(mux)/a \\tif subpath == "\/" {' main.go                                           # define trimmedSubpath:
    sed -i '/^\tif subpath == "\/"/a \\t\ttrimmedSubpath = ""' main.go                                                  #   if subpath="/" then trimmedSubpath=""
    sed -i '/trimmedSubpath = ""/a \\t\ttrimmedSubpath = subpath' main.go                                               #   if subpath="/anything" then trimmedSubpath="/anything"
    sed -i '/trimmedSubpath = ""/a \\t} else {' main.go                                                                 #   //
    sed -i '/^\t\ttrimmedSubpath = subpath/a \\t}' main.go                                                              #   //
    sed -i 's|"GET /"|"GET "+ subpath|g' main.go                                                                        # prepend subpath to app's landing page route
    sed -i 's|"POST /api/password"|"POST " + trimmedSubpath + "/api/password"|g' main.go                                # prepend trimmedSubpath to app's create_password route
    sed -i 's|"GET /api/password/{id}"|"GET " + trimmedSubpath + "/api/password/{id}"|g' main.go                        # prepend trimmedSubpath to app's get_password route
    sed -i 's|"HEAD /api/password/{id}"|"HEAD " + trimmedSubpath + "/api/password/{id}"|g' main.go                      # prepend trimmedSubpath to app's has_password route
    sed -i '/^\tlog.Printf("Listening on/a \\tlog.Printf("URL path: %s", subpath)' main.go                              # print subpath value in app's debug log
    sed -i '/FileServerFS/a \\tmux.Handle(trimmedSubpath + "/", http.StripPrefix(trimmedSubpath, fs))' main.go          # handle subpath in static files routing 
    sed -i '/FileServerFS/a \\tfs := http.FileServer(http.FS(staticFS))' main.go                                        # handle subpath in static files routing
    sed -i '/FIleServerFS/d' main.go                                                                                    # remove original static file serving method which fails at handling subpath 
    sed -i "s|=\"/\([^>]\)|=\"\1|g" static/index.html                                                                   # make assets paths relative in static files
    sed -i "s|\(const f = await fetch(.\)/|\1|g" static/js/lang.js                                                      # //
    sed -i "s|\(const res = await fetch(.\)/|\1|g" static/js/backend.js                                                 # //  

    # Build
	ynh_hide_warnings ynh_exec_as_app go build -o $install_dir/
popd

chmod +x "$install_dir/passed"

ynh_script_progression "Cleaning folders after build..."

ynh_safe_rm "$install_dir/build/"
ynh_safe_rm "$install_dir/.cache/"
ynh_safe_rm "$install_dir/.config/"

#=================================================
# REAPPLY SYSTEM CONFIGURATION
#=================================================
ynh_script_progression "Upgrading system configurations related to $app..."

# Create a dedicated NGINX config using the conf/nginx.conf template
ynh_config_add_nginx

# Create a dedicated systemd config
ynh_config_add --template=".env" --destination="$install_dir/.env"
ynh_config_add_systemd
yunohost service add "$app" --description="PassED, share a password securely" --log="/var/log/$app/$app.log"

# Use logrotate to manage application logfile(s)
ynh_config_add_logrotate

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression "Starting $app's systemd service..."

ynh_systemctl --service="$app" --action="start"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression "Upgrade of $app completed"
